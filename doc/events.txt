Events are a central concept in dmclient. They categorise part of a game system,
and are usually supplied with arguments; the parameter lists are listed below
along with the events in angle brackets (i.e., `<' and `>'). It is up to the
event handler to use these arguments

Events are created in the following two ways:

Scheduled events
	These events are presently only scheduled in terms of relative game time
	(i.e., rounds). This allows for example spells to have a finite
	duration.

Triggered events
	Triggered events are scheduled at the behest of user input or by other
	events. Event handlers for a particular event may be (indirectly)
	invoked during the execution of some script should the event need to be 
	processed immediately or scheduled to execute after the current event
	handler has finished.

Note that the above are only a categorisation of the /how/ of events, not
necessarily the what; any event can be scheduled or triggered, but sometimes it
doesn't make sense for some events to be triggered or scheduled. It is up to the
system author to ensure that 

Event handlers are tied to a particular Python class; an instantiation of this
class represents a particular handler for this event type. These instances are
meant to be carried around with a program session and event handlers for
scheduled events persist beyond the session.

Events can have conditions to prevent their execution if need be. These
conditions may be applied to both scheduled and triggered events. Scheduled
events may have their condition when they are scheduled and when they execute
depending on FIXME - this needs to be detailed.

FIXME - when/where/how do we distinguish between events and actions???

Comprehensive list of events:
	ACTOR EVENTS (each take an additional `actor' parameter as the source of
                      the event)
		starts moving (also considered to be "is moving")
		ends moving <location>

		casts spell <spell, list of targets>
		uses ability <ability, list of targets>
		uses skill <skill, list of targets>
			Note: these three might have additional parameters
			related to the particular spell/ability/etc.

		takes damage <???>
			This is a tricky one. Need to also look at the type of
			damage produced.
		deals(?) damage
		dies

		gains reward <reward>
			The Reward object may be standard money (as in some
			numeric value) or some other reward object. Event
			handlers need to distinguish between what the event
			argument type is.

		draws weapon
		equips item
			Note: drawing a weapon and equipping an item are
			different as some systems differentiate between the two
			(e.g., Quick Draw feat in D&D) and we may want any
			scripted NPCs to react to drawn weapons

			Note: should each item have an "equip cost"?
		drops item
		puts item away
		picks up item

		activates miscellaneous item

	AURA EVENTS
		Aura created (/created/ needs to be reworded)
		Aura fades
		Remove aura
